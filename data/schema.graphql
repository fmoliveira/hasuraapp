schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

# expression to compare columns of type Boolean. All fields are combined with logical 'AND'.
input Boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

scalar date

# expression to compare columns of type date. All fields are combined with logical 'AND'.
input date_comparison_exp {
  _eq: date
  _gt: date
  _gte: date
  _in: [date!]
  _is_null: Boolean
  _lt: date
  _lte: date
  _neq: date
  _nin: [date!]
}

# mutation root
type mutation_root {
  # delete data from the table: "todo"
  delete_todo(
    # filter the rows which have to be deleted
    where: todo_bool_exp!
  ): todo_mutation_response

  # insert data into the table: "todo"
  insert_todo(
    # the rows to be inserted
    objects: [todo_insert_input!]!

    # on conflict condition
    on_conflict: todo_on_conflict
  ): todo_mutation_response

  # update data of the table: "todo"
  update_todo(
    # sets the columns of the filtered rows to the given values
    _set: todo_set_input

    # filter the rows which have to be updated
    where: todo_bool_exp!
  ): todo_mutation_response
}

# column ordering options
enum order_by {
  # in the ascending order, nulls last
  asc

  # in the ascending order, nulls first
  asc_nulls_first

  # in the ascending order, nulls last
  asc_nulls_last

  # in the descending order, nulls first
  desc

  # in the descending order, nulls first
  desc_nulls_first

  # in the descending order, nulls last
  desc_nulls_last
}

# query root
type query_root {
  # fetch data from the table: "todo"
  todo(
    # distinct select on columns
    distinct_on: [todo_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [todo_order_by!]

    # filter the rows returned
    where: todo_bool_exp
  ): [todo!]!

  # fetch aggregated fields from the table: "todo"
  todo_aggregate(
    # distinct select on columns
    distinct_on: [todo_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [todo_order_by!]

    # filter the rows returned
    where: todo_bool_exp
  ): todo_aggregate!

  # fetch data from the table: "todo" using primary key columns
  todo_by_pk(id: String!): todo
}

# expression to compare columns of type String. All fields are combined with logical 'AND'.
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  _ilike: String
  _in: [String!]
  _is_null: Boolean
  _like: String
  _lt: String
  _lte: String
  _neq: String
  _nilike: String
  _nin: [String!]
  _nlike: String
  _nsimilar: String
  _similar: String
}

# subscription root
type subscription_root {
  # fetch data from the table: "todo"
  todo(
    # distinct select on columns
    distinct_on: [todo_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [todo_order_by!]

    # filter the rows returned
    where: todo_bool_exp
  ): [todo!]!

  # fetch aggregated fields from the table: "todo"
  todo_aggregate(
    # distinct select on columns
    distinct_on: [todo_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [todo_order_by!]

    # filter the rows returned
    where: todo_bool_exp
  ): todo_aggregate!

  # fetch data from the table: "todo" using primary key columns
  todo_by_pk(id: String!): todo
}

# columns and relationships of "todo"
type todo {
  completed: Boolean!
  createdAt: date!
  deleted: Boolean!
  deletedAt: date!
  id: String!
  text: String!
  updatedAt: date!
}

# aggregated selection of "todo"
type todo_aggregate {
  aggregate: todo_aggregate_fields
  nodes: [todo!]!
}

# aggregate fields of "todo"
type todo_aggregate_fields {
  count(columns: [todo_select_column!], distinct: Boolean): Int
  max: todo_max_fields
  min: todo_min_fields
}

# order by aggregate values of table "todo"
input todo_aggregate_order_by {
  count: order_by
  max: todo_max_order_by
  min: todo_min_order_by
}

# input type for inserting array relation for remote table "todo"
input todo_arr_rel_insert_input {
  data: [todo_insert_input!]!
  on_conflict: todo_on_conflict
}

# Boolean expression to filter rows from the table "todo". All fields are combined with a logical 'AND'.
input todo_bool_exp {
  _and: [todo_bool_exp]
  _not: todo_bool_exp
  _or: [todo_bool_exp]
  completed: Boolean_comparison_exp
  createdAt: date_comparison_exp
  deleted: Boolean_comparison_exp
  deletedAt: date_comparison_exp
  id: String_comparison_exp
  text: String_comparison_exp
  updatedAt: date_comparison_exp
}

# unique or primary key constraints on table "todo"
enum todo_constraint {
  # unique or primary key constraint
  todo_pkey
}

# input type for inserting data into table "todo"
input todo_insert_input {
  completed: Boolean
  createdAt: date
  deleted: Boolean
  deletedAt: date
  id: String
  text: String
  updatedAt: date
}

# aggregate max on columns
type todo_max_fields {
  createdAt: date
  deletedAt: date
  id: String
  text: String
  updatedAt: date
}

# order by max() on columns of table "todo"
input todo_max_order_by {
  createdAt: order_by
  deletedAt: order_by
  id: order_by
  text: order_by
  updatedAt: order_by
}

# aggregate min on columns
type todo_min_fields {
  createdAt: date
  deletedAt: date
  id: String
  text: String
  updatedAt: date
}

# order by min() on columns of table "todo"
input todo_min_order_by {
  createdAt: order_by
  deletedAt: order_by
  id: order_by
  text: order_by
  updatedAt: order_by
}

# response of any mutation on the table "todo"
type todo_mutation_response {
  # number of affected rows by the mutation
  affected_rows: Int!

  # data of the affected rows by the mutation
  returning: [todo!]!
}

# input type for inserting object relation for remote table "todo"
input todo_obj_rel_insert_input {
  data: todo_insert_input!
  on_conflict: todo_on_conflict
}

# on conflict condition type for table "todo"
input todo_on_conflict {
  constraint: todo_constraint!
  update_columns: [todo_update_column!]!
  where: todo_bool_exp
}

# ordering options when selecting data from "todo"
input todo_order_by {
  completed: order_by
  createdAt: order_by
  deleted: order_by
  deletedAt: order_by
  id: order_by
  text: order_by
  updatedAt: order_by
}

# select columns of table "todo"
enum todo_select_column {
  # column name
  completed

  # column name
  createdAt

  # column name
  deleted

  # column name
  deletedAt

  # column name
  id

  # column name
  text

  # column name
  updatedAt
}

# input type for updating data in table "todo"
input todo_set_input {
  completed: Boolean
  createdAt: date
  deleted: Boolean
  deletedAt: date
  id: String
  text: String
  updatedAt: date
}

# update columns of table "todo"
enum todo_update_column {
  # column name
  completed

  # column name
  createdAt

  # column name
  deleted

  # column name
  deletedAt

  # column name
  id

  # column name
  text

  # column name
  updatedAt
}

